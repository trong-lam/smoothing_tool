"""This comment is for two function below
        Two functions below will check whether the coordinate (px, py)
        is inside the polygon which is defined by set of two coordinates

        The algorithm is actually copy from via.html produced by the author
        Check it for more information

        :param
            --all_points_x: holds the set of x coordinate of polygon
            --all_points_y: holds the set of y coordinate of polygon
            --px: current mouse down x coordinate
            --py: current mouse down y coordinate

        :return
            whether px,py in or out the contour

    """
def is_left(x0,y0,x1,y1,x2,y2):
    return (((x1 - x0) * (y2 - y0)) - ((x2 - x0) * (y1 - y0)))

def is_inside_polygon(all_points_x, all_points_y, px, py):
    if len(all_points_x) == 0 or len(all_points_y) == 0:
        return 0
    wn = 0
    n = len(all_points_x)
    for i in range(n-1):
        is_left_value = is_left( all_points_x[i], all_points_y[i],
                                 all_points_x[i+1], all_points_y[i+1],
                                 px, py)
        if all_points_y[i] <= py:
            if all_points_y[i + 1] > py and is_left_value > 0:
                wn += 1
        else:
            if all_points_y[i+1]  <= py and is_left_value < 0:
                wn -= 1

    is_left_value  = is_left(all_points_x[n-1], all_points_y[n-1],
                               all_points_x[0], all_points_y[0],
                               px, py)
    if all_points_y[n - 1] <= py:
        if all_points_y[0] > py and is_left_value > 0:
            wn += 1
    else:
        if all_points_y[0] <= py and is_left_value < 0:
            wn -= 1

    if wn == 0:
        return 0
    else:
        return 1

def is_inside_contour_and_get_local_line(all_points_x, all_points_y, contours):
    """This function to find out which coordinates of contours are inside the polygon region
                :param
                    --contours: A specific contour of generated by contours[index]
                    --all_points_x: holds the set of x coordinate of polygon
                    --all_points_y: holds the set of y coordinate of polygon
                :return
                    True, False: in or out in the region
                    mul_range: if in, from where to where in contour
                """
    start_cnt = None
    end_cnt = None
    index = 0
    previous = 0
    mul_range = []
    print(len(list_contours(contours)))
    for i, cnt in enumerate(list_contours(contours)):
        px, py = cnt
        if is_inside_polygon(all_points_x, all_points_y, px, py) == 1:
            if index == previous:
                start_cnt = i
                index += 1
            if index > previous:
                end_cnt = i
        else:
            if index > previous:
                mul_range.append([start_cnt, end_cnt])
                #print('mul_range',mul_range)
                index = previous
            start_cnt = None
            end_cnt = None

    if start_cnt or end_cnt is not None:
        mul_range.append([start_cnt, end_cnt])

    if len(mul_range) == 0:
        return False, None
    else:
        return True, mul_range